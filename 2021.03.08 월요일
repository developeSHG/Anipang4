업무: PopupRoyalBoostGuide, PopupMail 로직 파악

PopupRoyalBoostGuide

Func<RoyalBoost.EBoostGrade, string> _getRoyalBoostEachRate = null;
RoyalBoost.EBoostGrade형 매개변수를 가지고, 반환값은 string형

- 무명메소드에 관한 설명
메소드가 매게변수나 반환값은 없을 수 있지만, 이름이 없을 수는 없다. 당연한 말이지만, 이름이 있어야 그 메소드를 호출할 수 있기 때문이다.
하지만 C#은 이름이 없는 무명 메소드를 제공한다. 무명 메소드는 이름이 없기 때문에, 메소드를 호출하기 위해서 델리게이트 변수가 필요하다.
즉 델리 게이트 변수를 선언하고, 그 변수로 무명 메소드를 참조하게 하는 것이다.
(델리게이트와 무명 메소드는 당연히 같은 형식이어야 한다.)
델리게이트로 무명 메소드를 참조하면 이제 함수내에서 얼마든지 호출해서 쓸 수 있다.
무명 메소드는 위와 같이 간단한 연산의 메소드를 임시적으로 써야 할 때나 델리게이트를 다른 함수에 넘겨주어 콜백으로 사용할 때에도 아주 유용하다.

- Func와 Action
무명 메소드를 사용하기 위해서는 이를 참조할 수 있는 델리게이트 변수가 있어야 하며, 또한 델리게이트 변수를 생성하기에 앞서 델리게이트 타입을 선언해야 한다.
각기 다른 타입에 무명 메소드를 여러개 만들 때는 어떻게 해야할까? 당연히 무명 메소드마다 그 타입에 맞는 델리게이트 타입과 변수를 따로 선언해야 할 것이다.
이는 매우 비효율적인 작업이기 때문에 C#에서는 Func과 Action이라는 델리게이트를 제공한다.

Func와 Action은 미리 선언된 델리게이트 변수로써 별도의 선언없이 사용가능하다.
Func는 반환값이 있는 메소드를 참조하는 델리게이트 변수이고,
Action은 반환값이 없는 메소드를 참조하는 델리게이트 변수이다.

Func<RoyalBoost.EBoostGrade, string> _getRoyalBoostEachRate = null;
위와 같이 Func 델리게이트 메소드를 참조하면 전처럼 델리게이트 타입을 선언하는 과정이 불필요해지므로 아주 간결하게 코드를 작성할 수 있다.

_getRoyalBoostEachRateImpl()는 해당하는 부스트등급에 id값을 얻어올려는 것 같음.
- struct RoyalBoost
로얄 모드에 사용하는 부스트의 데이터를 모아놓은 테이블

staticValue는 static(엑셀)에 데이터가 맞는지 확인해서 value값을 갖고오는 것 같음. 반황형은 Systems 클래스
TryGetValue로 참, 거짓을 통해 참이면 dictionary의 Value값, 거짓이면 인자로 넣었던 defaultValue값이 포함된 Systems

_getRoyalBoostEachRateImpl의 반환값은 string임. 
델리게이트를 이용해 반환할 코드를 짜줌.
Clamp(((int)inGrade) - 1의 -1은 잘모르겠음.
아까 찾은 targetRates이 dictionary에 없다면 Systems 안에 value는 null임. 그럴 경우 0을 return

_scrollView.Reset();
SetTotalCellCount(RoyalBoostController.GetController().GetBoostCount());
테이블 셀의 전체 개수를 지정하는 함수.
RoyalBoostController라는 임시 객체의 GetController()를 실행하면 StzAppController라는 컨트롤 담당 싱글톤 클래스에 등록여부를 확인하고
없으면 등록, 있으면 IControllable을 준다. (IControllable를 상속받는 BaseController가 있고, BaseController를 상속받는 RoyalBoostController)
_dummyStatic은 Dictionary로 현재 갖고있는 로열부스트의 정보들을 갖고있다. 그래서 총 count를 새서 리턴한다.




Popupmail
질문 : SkeletonGraphic은 왜 Image로 안한건지? 단순 애니메이션 이미지같음.
대충 Spine(척추)라는 걸 봐서 메쉬의 버텍스처럼 텍스처의 uv의 좌표를 왜곡시켜 애니메이션을 만드는 것으로 보임. 그래서 SkeletonGraphic이라는 클래스를 만들었구.

[SerializeField]MailScrollView _scrollView;
로열부스트스크롤과 마찬가지로 각각 독립적인 스크롤 뷰를 생성. 메일스크롤뷰에는 OBJ_EMPTY 게임오브젝트 등 추가적인 기능을 할 경우가 필요하니 따로 나눔.

public List<ServerDatas.Message> msgCommonList = new List<ServerDatas.Message>();
메세지 데이터들을 담는 List.

CheckNewMessage()는 새로운 메세지 있는지 확인하는 부분.
안읽은 메세지 여부에 따라 mail 버튼 이미지 변경 및 알람 이미지 출력

GenerateMessageList()는 메시지 리스트를 지웠다가 다시 생성하는 부분같음.

advertisement은 광고

IEnumerator Co_LoadMailData()
간단하게 요약하자면 IEnumerator는 Custom한 State를 만들어 while이나 foreach문으로 편리하게 쓰거나 Coroutin으로 사용하는 Interface의 일종.

RemoveMessage()
ServerModel안에 있는 massget를 받아와서 메세지를 지움.
그 후에 SetUI()를 통해 위에 했던 GenerateMessageList() 함수를 실행결정하고, msgCommonList 딕셔너리가 초기화.








